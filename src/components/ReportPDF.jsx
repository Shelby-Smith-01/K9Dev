// src/components/ReportPDF.jsx
import React from "react";
import {
  Document,
  Page,
  Text,
  Image,
  View,
  StyleSheet,
} from "@react-pdf/renderer";

// A4 page styles
const styles = StyleSheet.create({
  page: { padding: 24, fontSize: 11, fontFamily: "Helvetica" },
  header: { flexDirection: "row", alignItems: "center", marginBottom: 12 },
  logo: { width: 48, height: 48, marginRight: 12 },
  titleWrap: { flex: 1 },
  title: { fontSize: 16, fontWeight: 700 },
  sub: { fontSize: 10, color: "#555" },

  section: { marginTop: 10 },
  h2: { fontSize: 12, fontWeight: 700, marginBottom: 6 },
  row: { flexDirection: "row", gap: 16, marginBottom: 6, flexWrap: "wrap" },
  cell: { marginRight: 16, marginBottom: 4 },

  // Snapshot
  shotWrap: { marginTop: 8, border: 1, borderColor: "#ddd" },
  shot: { width: "100%", height: 380, objectFit: "cover" },
  shotCap: { fontSize: 9, color: "#444", marginTop: 4, textAlign: "center" },

  footer: { marginTop: 16, fontSize: 9, color: "#777" },
});

function Line({ label, value }) {
  return (
    <View style={styles.cell}>
      <Text>
        <Text style={{ fontWeight: 700 }}>{label}: </Text>
        <Text>{value ?? "—"}</Text>
      </Text>
    </View>
  );
}

/**
 * Props expected (from App.jsx buildPdfProps):
 * {
 *  departmentName, logoUrl, reportNo, createdAt,
 *  handler, dog, email, deviceId, trackId,
 *  distance_m, duration_ms, pace_label, avg_speed_label,
 *  weather, snapshotUrl, notes
 * }
 */
export default function ReportPDF(props) {
  const {
    departmentName = "Test PD",
    logoUrl = "https://flagcdn.com/w320/us.png",
    reportNo,
    createdAt,
    handler,
    dog,
    email,
    deviceId,
    trackId,
    distance_m,
    duration_ms,
    pace_label,
    avg_speed_label,
    weather,
    snapshotUrl, // data: URL or public https://... URL
    notes,
  } = props || {};

  const km = distance_m ? (distance_m / 1000).toFixed(2) : "0.00";
  const durStr = (() => {
    const s = Math.floor((duration_ms || 0) / 1000);
    const hh = Math.floor(s / 3600);
    const mm = Math.floor((s % 3600) / 60);
    const ss = s % 60;
    const pad = (n) => n.toString().padStart(2, "0");
    return hh > 0 ? `${hh}:${pad(mm)}:${pad(ss)}` : `${mm}:${pad(ss)}`;
  })();

  const weatherStr =
    weather && typeof weather === "object"
      ? `${weather.temperature}°C, wind ${weather.windspeed} km/h`
      : "—";

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        {/* Header */}
        <View style={styles.header}>
          {logoUrl ? <Image src={logoUrl} style={styles.logo} /> : null}
          <View style={styles.titleWrap}>
            <Text style={styles.title}>{departmentName} – K9 Track Report</Text>
            <Text style={styles.sub}>
              {reportNo ? `Report #: ${reportNo}   ` : ""}
              {createdAt ? `Created: ${new Date(createdAt).toLocaleString()}` : ""}
            </Text>
          </View>
        </View>

        {/* Summary */}
        <View style={styles.section}>
          <Text style={styles.h2}>Summary</Text>
          <View style={styles.row}>
            <Line label="Handler" value={handler} />
            <Line label="K9" value={dog} />
            <Line label="Email" value={email} />
          </View>
          <View style={styles.row}>
            <Line label="Device" value={deviceId} />
            <Line label="Track ID" value={trackId} />
          </View>
          <View style={styles.row}>
            <Line label="Distance" value={`${km} km`} />
            <Line label="Duration" value={durStr} />
            <Line label="Pace" value={pace_label || "—"} />
            <Line label="Avg Speed" value={avg_speed_label || "—"} />
          </View>
          <View style={styles.row}>
            <Line label="Weather" value={weatherStr} />
          </View>
        </View>

        {/* Snapshot */}
        <View style={styles.section}>
          <Text style={styles.h2}>Map Snapshot</Text>
          {snapshotUrl ? (
            <>
              {/* 
                @react-pdf/renderer supports both data: URLs and remote HTTPS URLs.
                Keep the container bordered for a clean print look.
              */}
              <View style={styles.shotWrap}>
                <Image src={snapshotUrl} style={styles.shot} />
              </View>
              <Text style={styles.shotCap}>
                Live map snapshot captured at stop time with full track polyline and stats.
              </Text>
            </>
          ) : (
            <Text>Snapshot unavailable.</Text>
          )}
        </View>

        {/* Notes */}
        <View style={styles.section}>
          <Text style={styles.h2}>Notes</Text>
          <Text>{notes || "—"}</Text>
        </View>

        <Text style={styles.footer}>
          Generated by K9 Live Tracker • {new Date().toLocaleString()}
        </Text>
      </Page>
    </Document>
  );
}

